import datetime

from django.test import TestCase
from django.db.utils import DataError

from school.models import School, Student


class SchoolTests(TestCase):
    """ Test module for School model """
    name = 'Test School'
    students_max_number = 10
    established_in = 2010
    location = 'Astana, Kazakhstan'

    def test_school_fields(self):
        school = School.objects.create(
            name=self.name,
            students_max_number=self.students_max_number,
            established_in=self.established_in,
            location=self.location
        )

        # Basic checks
        self.assertEquals(self.name, school.name)
        self.assertEquals(self.students_max_number, school.students_max_number)
        self.assertEquals(self.established_in, school.established_in)
        self.assertEquals(self.location, school.location)

        # Autogenerated datetime fields
        self.assertIsNotNone(school.created_at)
        self.assertIsInstance(school.created_at, datetime.datetime)

        self.assertIsNotNone(school.last_modified_at)
        self.assertIsInstance(school.last_modified_at, datetime.datetime)

    """ EXCEPTIONS check """
    def test_exceptions_established_in(self):
        """ established_in [1900 - <current_year>] """
        with self.assertRaises(ValueError):
            School.objects.create(
                name=self.name,
                students_max_number=self.students_max_number,
                established_in=1898,  # Less than 1900
                location=self.location
            )

        with self.assertRaises(ValueError):
            School.objects.create(
                name=self.name,
                students_max_number=self.students_max_number,
                established_in=2030,  # More than current year (2020)
                location=self.location
            )

    def test_exceptions_name(self):
        """ name (max_length: 20) """
        with self.assertRaises(DataError):
            School.objects.create(
                name='abcdefghijklmnopqrstuvwxyz',  # 26 chars length
                students_max_number=self.students_max_number,
                established_in=self.established_in,
                location=self.location
            )

    def test_exceptions_location(self):
        """ location (max_length: 50) """
        with self.assertRaises(DataError):
            School.objects.create(
                name=self.name,
                students_max_number=self.students_max_number,
                established_in=self.established_in,
                location='Lorem ipsum dolor sit amet, consectetur adipisicing elit.'  # 57 chars length
            )

    def test_str(self):
        school = School.objects.create(
            name=self.name,
            students_max_number=self.students_max_number,
            established_in=self.established_in,
            location=self.location,
        )

        self.assertEquals(school.__str__(), f'{school.name}({self.students_max_number})')


class StudentTests(TestCase):
    """ Test module for Student model """
    first_name = 'Test'
    last_name = 'Testovich'
    date_of_birth = datetime.date(1999, 9, 9)
    nationality = 'Kazakh'

    def test_student_fields(self):
        school = School.objects.create(
            name='Student Test School',
            students_max_number=5,
            established_in=1996,
            location='Bangkok, Thailand'
        )

        student = Student.objects.create(
            first_name=self.first_name,
            last_name=self.last_name,
            date_of_birth=self.date_of_birth,
            nationality=self.nationality,
            school=school
        )

        # Basic checks
        self.assertEquals(self.first_name, student.first_name)
        self.assertEquals(self.last_name, student.last_name)
        self.assertEquals(self.date_of_birth, student.date_of_birth)
        self.assertEquals(self.nationality, student.nationality)

        # Autogenerated datetime fields
        self.assertIsNotNone(student.created_at)
        self.assertIsInstance(student.created_at, datetime.datetime)

        self.assertIsNotNone(student.last_modified_at)
        self.assertIsInstance(student.last_modified_at, datetime.datetime)

        # student_id check
        self.assertEquals(20, len(student.student_id))  # length = 20
        self.assertIsInstance(student.student_id, str)  # instance of str class

        # school check
        self.assertEquals(school, student.school)

    """ EXCEPTIONS check """
    def test_student_school_limit(self):
        students_max_number = 5

        school = School.objects.create(
            name='Student Test School',
            students_max_number=students_max_number,
            established_in=1996,
            location='Bangkok, Thailand'
        )

        # Populating school with students
        for i in range(students_max_number):
            Student.objects.create(
                first_name=f'{self.first_name}_{i}',
                last_name=f'{self.last_name}_{i}',
                date_of_birth=self.date_of_birth,
                nationality=self.nationality,
                school=school
            )

        # Exceeding students_max_number value
        with self.assertRaises(ValueError):
            Student.objects.create(
                first_name=f'{self.first_name}_fail',
                last_name=f'{self.last_name}_fail',
                date_of_birth=self.date_of_birth,
                nationality=self.nationality,
                school=school
            )

    def test_exceptions_nationality(self):
        """ nationality (max_length: 20) """

        school = School.objects.create(
            name='Student Test School',
            students_max_number=100,
            established_in=1996,
            location='Bangkok, Thailand'
        )

        with self.assertRaises(DataError):
            Student.objects.create(
                first_name=f'{self.first_name}_fail',
                last_name=f'{self.last_name}_fail',
                date_of_birth=self.date_of_birth,
                nationality='abcdefghijklmnopqrstuvwxyz',  # 26 chars length
                school=school
            )

    def test_exceptions_first_name(self):
        """ first_name (max_length: 20) """

        school = School.objects.create(
            name='Student Test School',
            students_max_number=100,
            established_in=1996,
            location='Bangkok, Thailand'
        )

        with self.assertRaises(DataError):
            Student.objects.create(
                first_name='abcdefghijklmnopqrstuvwxyz',  # 26 chars length
                last_name=f'{self.last_name}_fail',
                date_of_birth=self.date_of_birth,
                nationality=self.nationality,
                school=school
            )

    def test_exceptions_last_name(self):
        """ last_name (max_length: 20) """

        school = School.objects.create(
            name='Student Test School',
            students_max_number=100,
            established_in=1996,
            location='Bangkok, Thailand'
        )

        with self.assertRaises(DataError):
            Student.objects.create(
                first_name=self.first_name,
                last_name='abcdefghijklmnopqrstuvwxyz',  # 26 chars length
                date_of_birth=self.date_of_birth,
                nationality=self.nationality,
                school=school
            )

    def test_str(self):
        school = School.objects.create(
            name='Student Test School',
            students_max_number=100,
            established_in=1996,
            location='Bangkok, Thailand'
        )

        student = Student.objects.create(
            first_name=self.first_name,
            last_name=self.last_name,
            date_of_birth=self.date_of_birth,
            nationality=self.nationality,
            school=school
        )

        self.assertEquals(student.__str__(), f'{student.student_id}: {student.first_name} {student.last_name}')
